#!/usr/bin/sh

# [ "$(lsb_release -is)" = "Arch" ] || echo "this only works on Arch Linux" && exit 1

end() {
  printf '%s\n' "$1" >&2 && exit 1 # log to stderr and exit with failure
}

welcome() {
  gum confirm --prompt.foreground 99 --prompt.border-foreground 105 --prompt.width 55 \
    --prompt.margin "1 2" --prompt.padding "1 2" --prompt.border double \
    --prompt.align center --affirmative "Continue" --negative "End" \
    --default "Welcome to irisfield's Arch Linux RICE installer.
This script installs a minimal Linux desktop using irisfield's dotfiles."
}

if_user_exists() {
  if id -u "$username" >/dev/null 2>&1; then
    gum confirm --prompt.foreground 99 --prompt.border-foreground 105 --prompt.width 55 \
      --prompt.margin "1 2" --prompt.padding "1 2" --prompt.border thick \
      --prompt.align center --affirmative "Proceed" --negative "Exit" \
      --default "$(gum style --bold --foreground 124 "WARNING")
The user '$username' already exists on this system! \
Would you like to proceed with the installation and overwrite conflicting \
settings and dotfiles for this user?" &&
    gum confirm --prompt.foreground 99 --prompt.border-foreground 105 --prompt.width 55 \
      --prompt.margin "1 2" --prompt.padding "1 2" --prompt.border thick \
      --prompt.align center --negative "Exit" \
      --default "$(gum style --bold --foreground 124 "WARNING")
Settings and dotfiles aside, no other file in the home directory will be affected. \
Note that this will change the user's password to the new one.
$(gum style --width 55 --align middle --bold --foreground 69 \
  'Are you sure you would like to proceed?')"
  fi
}

install_paru() {
  # temporary directory to use for paru
  parudir="/mnt/home/${username}/paru"
  # clone the paru-bin package from the AUR to the temporary directory
  mkdir -p "$parudir" && git clone --single-branch --depth 1 --no-tags -q \
    "https://aur.archlinux.org/paru-bin.git" "$parudir" || end "failed to clone paru"
  # extract the version number of the most recent version
  pkgver="$(awk -F"[=]" '/pkgver=/{print $2}' ${parudir}/PKGBUILD)"
  pkgname="paru-v${pkgver}-x86_64.tar.zst"
  url="https://github.com/Morganamilo/paru/releases/download/v${pkgver}/${pkgname}"
  # download the package from github
  curl -L -o "${parudir}/${pkgname}" "$url" > /dev/null 2>&1
  # extract the tar file to the temporary directory
  tar -xvf "${parudir}/${pkgname}" -C "$parudir" > /dev/null 2>&1 &&
    chmod +x "${parudir}/paru"
  # use paru to install paru so that it can be managed by pacman
  arch-chroot /mnt sudo -u "$username" \
    "/${parudir#/*/}"/paru --noconfirm -Sy paru-bin > /dev/null 2>&1 &&
      echo "installed paru, an AUR helper"
  # clean up
  rm -rf "$parudir" && unset parudir
}

install_packages() {
  if [ -f "./packages.csv" ]; then
    # extract all the valid entries from the file
    grep '^[RU],[^,]\+,".*"$' packages.csv > /mnt/tmp/packages.csv
    # remove any inline '#' comments
    sed -i "s/\s*#[^\"']*$//" /mnt/tmp/packages.csv
  else
    printf '%b\n' "This directory does not have a \033[37mpackages.csv\033[0m file!"
    return 1
  fi
  # total number of packages
  printf '%s\n' "Total packages: $(wc -l < /mnt/tmp/packages.csv)" && n=0
  # installation loop
  while IFS=, read -r repo pkg desc; do
    echo "$desc" | grep -q "^\".*\"$" && desc="$(echo "$desc" | sed -E "s/(^\"|\"$)//g")"
    n=$((n + 1)) && msg=$(printf '%b\n' "${n}. \033[35m${pkg}\033[0m ${desc}")
    case "$repo" in
      "R")
        gum spin --spinner line --title "$msg" -- \
          pacstrap -K /mnt "$pkg" > /dev/null 2&>1 ||
            printf '%b\n' "\033[32m${repo}\033[0m, \033[31m${pkg}\033[0m failed"
      ;;
      "U")
        gum spin --spinner line --title "$msg" -- \
          arch-chroot /mnt -- paru --noconfirm --needed -S "$pkg" > /dev/null 2&>1 ||
            printf '%b\n' "\033[32m${repo}\033[0m, \033[31m${pkg}\033[0m failed"
      ;;
    esac
  done < /mnt/tmp/packages.csv && rm -f /mnt/tmp/packages.csv
}


install_aur_helper() {
  parudir="/home/$username/.cache/paru/clone"
  sudo -u "$username" mkdir -p "${parudir}" &&
  gum spin --spinner line --show-output --title "Installing paru, an AUR helper..." -- \
    sudo -u "$username" git clone -q "https://aur.archlinux.org/paru-bin.git" \
      "${parudir}/paru" && cd "${parudir}/paru" &&
        sudo -u "$username" makepkg --noconfirm -si
}

main_install() {
  mpk=$(printf '\n%b %b' "\033[1m$1\033[21m" "$2")
  gum spin --spinner line --title "($n/$total) Installing $1.$mpk" -- \
    pacman --noconfirm --needed -S "$1"
}

paru_install() {
  apk=$(printf '\n%b %b' "\033[1m$1\033[0m" "$2")
  gum spin --spinner line --title "($n/$total) Installing $1 from the AUR.$apk" -- \
    doas -u "$username" paru --noconfirm --needed -S "$1"
}

get_packages() {
  if [ -f "./packages.csv" ]; then
    trap 'rm -f /packages.csv' EXIT HUP INT QUIT TERM
    # extract all the valid entries from the file
    grep '^[RU],[^,]\+,".*"$' packages.csv > /tmp/packages.csv
    # remove any inline '#' comments
    sed -i "s/\s*#[^\"']*$//" /tmp/packages.csv
  else
    printf '%b\n' "This directory does not have a \033[37mpackages.csv\033[0m file!"
    return 1
  fi
}

install_packages() {
  if get_packages; then
    total=$(wc -l < /tmp/packages.csv) && n=0
    while IFS=, read -r repo package description; do
      n=$((n + 1))
      echo "$description" | grep -q "^\".*\"$" &&
        description="$(echo "$description" | sed -E "s/(^\"|\"$)//g")"
      case "$repo" in
        "R") main_install "$package" "$description" && n=$((n + 1)) ;;
        "U") paru_install "$package" "$description" && n=$((n + 1)) ;;
      esac
    done < /tmp/packages.csv
  fi
}

### START ###

welcome || end "bye bye"

get_username

get_password

if_user_exists || end "exited"

create_user || end "something something went wrong at create_user"

install_aur_helper || end "something went wrong at install_aur_helper"

install_packages || end "something went wrong at install_packages"

[ -n "$(command -v sudo)" ] && gum spin --spinner line --title "Removing sudo..." -- \
  pacman --noconfirm -Rns sudo || echo "failed to uninstall sudo, please manually do so"

tee /etc/doas.conf >/dev/null << EOF
# permit members of the wheel group to perform actions as root and to:
#   persist - not require confirmation by password for five minutes,
#   keepenv - preserve their existing environment variables,
#   setenv {} - access their locale
permit persist keepenv setenv { LANG LC_ALL } :wheel

# permit members of the wheel group to use the following commands without a password
permit nopass :wheel as root cmd dmesg
permit nopass :wheel as root cmd mount
permit nopass :wheel as root cmd umount
permit nopass :wheel as root cmd reboot
permit nopass :wheel as root cmd shutdown
permit nopass :wheel as root cmd loadkeys
permit nopass :wheel as root cmd pacman args -S
permit nopass :wheel as root cmd pacman args -Sy
permit nopass :wheel as root cmd pacman args -Syu
permit nopass :wheel as root cmd pacman args -Rns

EOF

# the owner and group should both be 0, file permissions should be set to 0400
chown -c root:root /etc/doas.conf && chmod -c 0400 /etc/doas.conf

# check for syntax errors as it is imperative that /etc/doas.conf is error free
doas doas -C /etc/doas.conf >&2 || end "please fix the syntax error before proceeding"

### PACKAGES ###

header "Installing user packages"

# temporarily allow user to install packages without password
echo "%${username} ALL=(ALL) NOPASSWD: ALL" > /mnt/etc/sudoers.d/install-packages

# install AUR helper
install_paru || end "something went wrong at install_paru"

install_packages || end "something went wrong at install_packages"

# clean up
rm -f /mnt/etc/sudoers.d/install-packages
